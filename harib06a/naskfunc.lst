     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; ƒIƒuƒWƒFƒNƒgƒtƒ@ƒCƒ‹‚ðì‚éƒ‚[ƒh	
     5 00000000                                 [INSTRSET "i486p"]				; 486‚Ì–½—ß‚Ü‚ÅŽg‚¢‚½‚¢‚Æ‚¢‚¤‹Lq
     6 00000000                                 [BITS 32]						; 32ƒrƒbƒgƒ‚[ƒh—p‚Ì‹@ŠBŒê‚ðì‚ç‚¹‚é
     7 00000000                                 [FILE "naskfunc.nas"]			; ƒ\[ƒXƒtƒ@ƒCƒ‹–¼î•ñ
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    15 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    16 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c
    17 00000000                                 
    18                                          [SECTION .text]
    19 00000000                                 
    20 00000000                                 _io_hlt:	; void io_hlt(void);
    21 00000000 F4                              		HLT
    22 00000001 C3                              		RET
    23 00000002                                 
    24 00000002                                 _io_cli:	; void io_cli(void);
    25 00000002 FA                              		CLI
    26 00000003 C3                              		RET
    27 00000004                                 
    28 00000004                                 _io_sti:	; void io_sti(void);
    29 00000004 FB                              		STI
    30 00000005 C3                              		RET
    31 00000006                                 
    32 00000006                                 _io_stihlt:	; void io_stihlt(void);
    33 00000006 FB                              		STI
    34 00000007 F4                              		HLT
    35 00000008 C3                              		RET
    36 00000009                                 
    37 00000009                                 _io_in8:	; int io_in8(int port);
    38 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    39 0000000D B8 00000000                     		MOV		EAX,0
    40 00000012 EC                              		IN		AL,DX
    41 00000013 C3                              		RET
    42 00000014                                 
    43 00000014                                 _io_in16:	; int io_in16(int port);
    44 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    45 00000018 B8 00000000                     		MOV		EAX,0
    46 0000001D 66 ED                           		IN		AX,DX
    47 0000001F C3                              		RET
    48 00000020                                 
    49 00000020                                 _io_in32:	; int io_in32(int port);
    50 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    51 00000024 ED                              		IN		EAX,DX
    52 00000025 C3                              		RET
    53 00000026                                 
    54 00000026                                 _io_out8:	; void io_out8(int port, int data);
    55 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    57 0000002E EE                              		OUT		DX,AL
    58 0000002F C3                              		RET
    59 00000030                                 
    60 00000030                                 _io_out16:	; void io_out16(int port, int data);
    61 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    62 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    63 00000038 66 EF                           		OUT		DX,AX
    64 0000003A C3                              		RET
    65 0000003B                                 
    66 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    67 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    68 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    69 00000043 EF                              		OUT		DX,EAX
    70 00000044 C3                              		RET
    71 00000045                                 
    72 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    73 00000045 9C                              		PUSHFD		; PUSH EFLAGS ‚Æ‚¢‚¤ˆÓ–¡
    74 00000046 58                              		POP		EAX
    75 00000047 C3                              		RET
    76 00000048                                 
    77 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    78 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    79 0000004C 50                              		PUSH	EAX
    80 0000004D 9D                              		POPFD		; POP EFLAGS ‚Æ‚¢‚¤ˆÓ–¡
    81 0000004E C3                              		RET
    82 0000004F                                 
    83 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    84 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    85 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    86 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    87 0000005E C3                              		RET
    88 0000005F                                 
    89 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    90 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    91 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    92 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    93 0000006E C3                              		RET
    94 0000006F                                 
    95 0000006F                                 _asm_inthandler21:
    96 0000006F 06                              		PUSH	ES
    97 00000070 1E                              		PUSH	DS
    98 00000071 60                              		PUSHAD
    99 00000072 89 E0                           		MOV		EAX,ESP
   100 00000074 50                              		PUSH	EAX
   101 00000075 66 8C D0                        		MOV		AX,SS
   102 00000078 8E D8                           		MOV		DS,AX
   103 0000007A 8E C0                           		MOV		ES,AX
   104 0000007C E8 [00000000]                   		CALL	_inthandler21
   105 00000081 58                              		POP		EAX
   106 00000082 61                              		POPAD
   107 00000083 1F                              		POP		DS
   108 00000084 07                              		POP		ES
   109 00000085 CF                              		IRETD
   110 00000086                                 
   111 00000086                                 _asm_inthandler27:
   112 00000086 06                              		PUSH	ES
   113 00000087 1E                              		PUSH	DS
   114 00000088 60                              		PUSHAD
   115 00000089 89 E0                           		MOV		EAX,ESP
   116 0000008B 50                              		PUSH	EAX
   117 0000008C 66 8C D0                        		MOV		AX,SS
   118 0000008F 8E D8                           		MOV		DS,AX
   119 00000091 8E C0                           		MOV		ES,AX
   120 00000093 E8 [00000000]                   		CALL	_inthandler27
   121 00000098 58                              		POP		EAX
   122 00000099 61                              		POPAD
   123 0000009A 1F                              		POP		DS
   124 0000009B 07                              		POP		ES
   125 0000009C CF                              		IRETD
   126 0000009D                                 
   127 0000009D                                 _asm_inthandler2c:
   128 0000009D 06                              		PUSH	ES
   129 0000009E 1E                              		PUSH	DS
   130 0000009F 60                              		PUSHAD
   131 000000A0 89 E0                           		MOV		EAX,ESP
   132 000000A2 50                              		PUSH	EAX
   133 000000A3 66 8C D0                        		MOV		AX,SS
   134 000000A6 8E D8                           		MOV		DS,AX
   135 000000A8 8E C0                           		MOV		ES,AX
   136 000000AA E8 [00000000]                   		CALL	_inthandler2c
   137 000000AF 58                              		POP		EAX
   138 000000B0 61                              		POPAD
   139 000000B1 1F                              		POP		DS
   140 000000B2 07                              		POP		ES
   141 000000B3 CF                              		IRETD
   142 000000B4                                 
   143 000000B4                                 _load_cr0:  ;int load_cr0(void);
   144 000000B4 0F 20 C0                        		MOV EAX, CR0
   145 000000B7 C3                              		RET
   146 000000B8                                 
   147 000000B8                                 _store_cr0:  ; void store_cr0(int cr0)
   148 000000B8 8B 44 24 04                     		MOV EAX, [ESP + 4]
   149 000000BC                                 		MOV CR0 EAX
      >> [ERROR #002] parameter error.
   150 000000BC C3                              		RET
   151 000000BD                                 
   152 000000BD                                 ; 以下为memtest_sub 实现代码，因为编译器会自动优化，所以此检查内存代码只能使用汇编语言写，此处拒绝优化
   153 000000BD                                 _memtest_sub:	; unsigined int memtest_sub(unsigned int start, unsigned int end)
   154 000000BD 57                              		PUSH EDI
   155 000000BE 56                              		PUSH ESI
   156 000000BF 53                              		PUSH EBX
   157 000000C0 BE AA55AA55                     		MOV ESI, 0xaa55aa55
   158 000000C5 BF 55AA55AA                     		MOV EDI, 0x55aa55aa
   159 000000CA 8B 44 24 10                     		MOV EAX,[ESP + 12 + 4] ; i = start
   160 000000CE                                 mts_loop:
   161 000000CE 89 C3                           		MOV 		EBX, EAX
   162 000000D0 81 C3 00000FFC                  		ADD 		EBX, 0xffc
   163 000000D6 8B 13                           		MOV		EDX, [EBX]
   164 000000D8 89 33                           		MOV		[EBX], ESI
   165 000000DA 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff
   166 000000DD 3B 3B                           		CMP		EDI, [EBX]
   167 000000DF 75 18                           		JNE		mts_fin
   168 000000E1 83 33 FF                        		XOR		DWORD [EBX], 0xffffffff
   169 000000E4 3B 33                           		CMP		ESI, [EBX]
   170 000000E6 75 11                           		JNE		mts_fin
   171 000000E8 89 13                           		MOV		[EBX], EDX
   172 000000EA 05 00001000                     		ADD 		EAX, 0x1000
   173 000000EF 3B 44 24 14                     		CMP		EAX, [ESP + 12 +8]
   174 000000F3                                 
   175 000000F3 76 D9                           		JBE 		mts_loop
   176 000000F5 5B                              		POP 		EBX
   177 000000F6 5E                              		POP 		ESI
   178 000000F7 5F                              		POP 		EDI
   179 000000F8 C3                              		RET
   180 000000F9                                 mts_fin:
   181 000000F9 89 13                           		MOV 		[EBX], EDX
   182 000000FB 5B                              		POP 		EBX
   183 000000FC 5E                              		POP 		ESI
   184 000000FD 5F                              		POP 		EDI
   185 000000FE C3                              		RET
